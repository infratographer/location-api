directive @prefixedID(prefix: String!) on OBJECT
"""Input information to create a location."""
input CreateLocationInput {
	"""The name for the location."""
	name: String!
	"""An optional description for the location."""
	description: String
	"""The ID of the resource owner for the location."""
	ownerID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""A valid JSON string."""
scalar JSON
type Location implements Node & MetadataNode @key(fields: "id") @prefixedID(prefix: "lctnloc") {
	"""ID for the location."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name for the location."""
	name: String!
	"""An optional description for the location."""
	description: String
	owner: ResourceOwner!
}
"""A connection to a list of items."""
type LocationConnection {
	"""A list of edges."""
	edges: [LocationEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from locationCreate"""
type LocationCreatePayload {
	"""The created annotation namespace."""
	location: Location!
}
"""Return response from locationDelete"""
type LocationDeletePayload {
	"""The ID of the deleted annotation namespace."""
	deletedID: ID!
}
"""An edge in a connection."""
type LocationEdge {
	"""The item at the end of the edge."""
	node: Location
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for Location connections"""
input LocationOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Locations."""
	field: LocationOrderField!
}
"""Properties by which Location connections can be ordered."""
enum LocationOrderField {
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from locationUpdate"""
type LocationUpdatePayload {
	"""The updated annotation namespace."""
	location: Location!
}
"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput {
	not: LocationWhereInput
	and: [LocationWhereInput!]
	or: [LocationWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
}
interface MetadataNode {
	id: ID!
}
type Mutation {
	"""Create a location."""
	locationCreate(input: CreateLocationInput!): LocationCreatePayload!
	"""Delete a location."""
	locationDelete(
		"""The ID of the annotation namespace to be deleted."""
		id: ID!
	): LocationDeletePayload!
	"""Update a location."""
	locationUpdate(id: ID!, input: UpdateLocationInput!): LocationUpdatePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
	"""The id of the object."""
	id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
	"""Specifies an ascending order for a given `orderBy` argument."""
	ASC
	"""Specifies a descending order for a given `orderBy` argument."""
	DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
	"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
	"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
	"""When paginating backwards, the cursor to continue."""
	startCursor: Cursor
	"""When paginating forwards, the cursor to continue."""
	endCursor: Cursor
}
type Query {
	"""Lookup a location by id."""
	location(
		"""The ID of the location."""
		id: ID!
	): Location!
	_entities(representations: [_Any!]!): [_Entity]!
	_service: _Service!
}
type ResourceOwner @key(fields: "id") @interfaceObject {
	id: ID!
	locations(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Locations returned from the connection."""
		orderBy: LocationOrder

		"""Filtering options for Locations returned from the connection."""
		where: LocationWhereInput
	): LocationConnection!
}
"""The builtin Time type"""
scalar Time
"""Input information to update a location."""
input UpdateLocationInput {
	"""The name for the location."""
	name: String
	"""An optional description for the location."""
	description: String
	clearDescription: Boolean
}
scalar _Any
# a union of all types that use the @key directive
union _Entity = Location | ResourceOwner
type _Service {
	sdl: String
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: [
			"@key",
			"@interfaceObject",
			"@shareable",
			"@inaccessible",
			"@override",
			"@provides",
			"@requires",
			"@tag"
      ]
  )
