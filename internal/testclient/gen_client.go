// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetLocationByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetLocationByID, error)
	GetResourceOwnerLocations(ctx context.Context, id gidx.PrefixedID, orderBy *LocationOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceOwnerLocations, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Location Location "json:\"location\" graphql:\"location\""
	Entities []Entity "json:\"_entities\" graphql:\"_entities\""
	Service  Service  "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	LocationCreate LocationCreatePayload "json:\"locationCreate\" graphql:\"locationCreate\""
	LocationDelete LocationDeletePayload "json:\"locationDelete\" graphql:\"locationDelete\""
	LocationUpdate LocationUpdatePayload "json:\"locationUpdate\" graphql:\"locationUpdate\""
}
type GetLocationByID struct {
	Location struct {
		ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name        string          "json:\"name\" graphql:\"name\""
		Description *string         "json:\"description\" graphql:\"description\""
		Owner       struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"owner\" graphql:\"owner\""
	} "json:\"location\" graphql:\"location\""
}
type GetResourceOwnerLocations struct {
	Entities []*struct {
		Locations struct {
			Edges []*struct {
				Node *struct {
					ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name        string          "json:\"name\" graphql:\"name\""
					Description *string         "json:\"description\" graphql:\"description\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"locations\" graphql:\"locations\""
	} "json:\"_entities\" graphql:\"_entities\""
}

const GetLocationByIDDocument = `query GetLocationByID ($id: ID!) {
	location(id: $id) {
		id
		name
		description
		owner {
			id
		}
	}
}
`

func (c *Client) GetLocationByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetLocationByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetLocationByID
	if err := c.Client.Post(ctx, "GetLocationByID", GetLocationByIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetResourceOwnerLocationsDocument = `query GetResourceOwnerLocations ($id: ID!, $orderBy: LocationOrder) {
	_entities(representations: {__typename:"ResourceOwner",id:$id}) {
		... on ResourceOwner {
			locations(orderBy: $orderBy) {
				edges {
					node {
						id
						name
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) GetResourceOwnerLocations(ctx context.Context, id gidx.PrefixedID, orderBy *LocationOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetResourceOwnerLocations, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetResourceOwnerLocations
	if err := c.Client.Post(ctx, "GetResourceOwnerLocations", GetResourceOwnerLocationsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
